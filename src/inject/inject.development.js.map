{"version":3,"file":"inject.development.js","sources":["webpack://@tencent/extra-source-replace-tool/./src/utils/url-parser.js","webpack://@tencent/extra-source-replace-tool/webpack/bootstrap","webpack://@tencent/extra-source-replace-tool/./src/inject/inject.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _wrapRegExp(re, groups) { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _RegExp = _wrapNativeSuper(RegExp); var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = _RegExp.call(this, re, flags); _groups.set(_this, groups || _groups.get(re)); return _this; } _inherits(BabelRegExp, _RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === \"string\") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) { return \"$\" + groups[name]; })); } else if (typeof substitution === \"function\") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = []; args.push.apply(args, arguments); if (_typeof(args[args.length - 1]) !== \"object\") { args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar URL_VALID_CHARS = \"-_.~!*'();:@&=+$,/?#\";\nvar VALID_CHARS = {\n  pathname: 'a-z0-9\\\\' + URL_VALID_CHARS.replace(/[;:@&=+$,/?#']/g, '').split('').join('\\\\'),\n  host: 'a-z0-9\\\\' + URL_VALID_CHARS.replace(/[.;:@&=+$,/?#']/g, '').split('').join('\\\\'),\n  hash: 'a-z0-9\\\\' + URL_VALID_CHARS.replace(/[?#']/g, '').split('').join('\\\\'),\n  search: 'a-z0-9\\\\' + URL_VALID_CHARS.replace(/[?#']/g, '').split('').join('\\\\')\n};\nvar URL_REGS = {\n  protocol: \"(https?:)?//\",\n  pathname: \"(^[\".concat(VALID_CHARS.pathname, \"]+)?((\\\\/[\").concat(VALID_CHARS.pathname, \"]+)+\\\\/?|/)\"),\n  host: \"([\".concat(VALID_CHARS.host, \"])+(\\\\.[\").concat(VALID_CHARS.host, \"]+)+(:d+)?\"),\n  hash: \"#[\".concat(VALID_CHARS.hash, \"]*\"),\n  search: \"\\\\?[\".concat(VALID_CHARS.search, \"]*\")\n};\n\nvar _w = function _w(name, group) {\n  return \"(\".concat(group ? \"?<\".concat(name, \">\") : '').concat(URL_REGS[name], \")\");\n};\n\nObject.keys(URL_REGS).forEach(function (v) {\n  URL_REGS[v + '_g'] = _w(v, true);\n  URL_REGS[v] = _w(v);\n});\nvar URL_ORIGIN_REG = \"(?<origin>\".concat(URL_REGS.protocol_g).concat(URL_REGS.host_g, \")\");\nvar URL_TAIL_REG = \"(?<tail>\".concat(URL_REGS.pathname_g, \"?(\").concat(URL_REGS.hash_g, \"|\").concat(URL_REGS.search_g, \")?)\");\nvar URL_REG = new RegExp(\"\".concat(URL_ORIGIN_REG, \"?\").concat(URL_TAIL_REG), 'i');\nvar URL_ORIGIN_NO_GROUP = \"(\".concat(URL_REGS.protocol).concat(URL_REGS.host, \")\");\nvar URL_SEARCH_NO_GROUP = \"(\".concat(URL_REGS.hash, \"|\").concat(URL_REGS.search, \")\");\nvar URL_TAIL_NO_GROUP = \"(\".concat(URL_REGS.pathname).concat(URL_SEARCH_NO_GROUP, \"?|\").concat(URL_SEARCH_NO_GROUP, \")\");\nvar URL_REG_NO_GROUP = new RegExp(\"(\".concat(URL_ORIGIN_NO_GROUP).concat(URL_TAIL_NO_GROUP, \"?)|(\").concat(URL_TAIL_NO_GROUP, \")\"), 'i');\nvar URL_REG_NO_GROUP_ALL = new RegExp(\"^\".concat(URL_REG_NO_GROUP.source, \"$\"), URL_REG.flags);\n\nvar testUrl = function testUrl(str, all) {\n  return str && (all ? URL_REG_NO_GROUP_ALL : URL_REG_NO_GROUP).test(str);\n};\n\nvar execUrlNormalize = function execUrlNormalize(groups) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var defaultProtocol = options.protocol || 'http';\n  Object.keys(groups).forEach(function (key) {\n    if (key === 'protocol') {\n      if (groups[key] !== undefined) {\n        var _groups$key$split = groups[key].split(':'),\n            _groups$key$split2 = _slicedToArray(_groups$key$split, 2),\n            protocol = _groups$key$split2[0],\n            slash = _groups$key$split2[1];\n\n        if (!slash) {\n          groups[key] = defaultProtocol;\n          groups.origin = defaultProtocol + ':' + groups.origin;\n          groups.href = defaultProtocol + ':' + groups.href;\n        } else {\n          groups[key] = protocol;\n        }\n      } else {\n        var protocolWidthSlash = defaultProtocol + '://';\n        groups[key] = defaultProtocol;\n\n        if (groups.host) {\n          // host exist\n          groups.origin = protocolWidthSlash + groups.origin;\n          groups.href = protocolWidthSlash + groups.href;\n        }\n      }\n    } else if (key === 'host') {\n      if (groups[key] !== undefined) {\n        var _groups$key$split3 = groups[key].split(':'),\n            _groups$key$split4 = _slicedToArray(_groups$key$split3, 2),\n            hostname = _groups$key$split4[0],\n            port = _groups$key$split4[1];\n\n        groups.hostname = hostname;\n        groups.port = port;\n      }\n    } else if (key === 'pathname') {\n      if (groups[key] !== undefined && !groups[key].startsWith('/')) {\n        groups[key] = '/' + groups[key];\n      }\n    }\n\n    if (groups[key] === undefined) {\n      groups[key] = '';\n    }\n  });\n  return groups.origin || groups.tail ? groups : null;\n};\n\nvar parseUrl = function parseUrl(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (str === undefined) return null;\n  var res = URL_REG.exec(str);\n  if (!res || res[0] !== str) return null;\n  res = _objectSpread({\n    href: res[0]\n  }, res.groups);\n  return execUrlNormalize(res, options);\n};\n\nvar FULL_INFO_CACHE = new Map();\n\nvar getUrlFullInfo = function getUrlFullInfo(str, incomplete) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!incomplete && FULL_INFO_CACHE.has(str)) return FULL_INFO_CACHE.get(str);\n  var location = parseUrl(str, options);\n  if (!location || !location.host && !location.pathname) return null;\n  location.ext = '';\n\n  if (!location.host && location.pathname || options.origins && options.origins.includes(location.origin)) {\n    location.inside = true;\n  } // empty ext regarded as source, though cgi\n\n\n  if (!incomplete) {\n    var ext = /\\.([0-0a-z]+)$/i.exec(location.pathname);\n    if (ext) location.ext = ext[1];\n    FULL_INFO_CACHE.set(str, location);\n  }\n\n  return location;\n};\n\nvar URL_STYLE_REG = /*#__PURE__*/_wrapRegExp(/url\\((([\"']?)((?:(?![ \"'])[\\s\\S])+)\\2)\\)/i, {\n  origin: 1,\n  href: 3\n});\n\nvar parseStyleUrl = function parseStyleUrl(str, test) {\n  var res = URL_STYLE_REG.exec(str);\n  if (!res) return null;\n  var isValid = !test || testUrl(res.groups.href, true);\n  return isValid ? res.groups : null;\n};\n\nvar getExecResult = function getExecResult(str, reg) {\n  var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var regG = new RegExp(reg, 'g');\n  var result = [];\n  var cur;\n\n  while (cur = regG.exec(str)) {\n    if (!cur[0]) break;\n\n    if (typeof condition === 'function' ? condition(cur) : condition) {\n      result.push(cur.groups);\n    }\n  }\n\n  return result;\n};\n\nvar execUrl = function execUrl(str) {\n  return getExecResult(str, URL_REG);\n};\n\nvar execStyleUrl = function execStyleUrl(str, test) {\n  return getExecResult(str, URL_STYLE_REG, function (cur) {\n    return !test || testUrl(cur.groups.href, true);\n  });\n};\n\nvar transformCgi = function transformCgi(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // use options\n  if (typeof options.transformCgi === 'function') return options.transformCgi(url);\n  var urlObj = url;\n\n  if (_typeof(url) === 'object') {\n    url = url.href || '';\n  } else if (typeof url === 'string') {\n    urlObj = getUrlFullInfo(url, true, options);\n  } else {\n    console.error(\"esrt transformCgi error! \".concat(_typeof(url)));\n    console.error(url);\n    throw new Error('url`s type must be object or string!');\n  } // not url\n\n\n  if (!urlObj) return url; // extra\n\n  if (!urlObj.inside) return options.blockExtraUrl ? '' : url; // block path\n\n  if (options.blockPaths.includes(urlObj.pathname)) return '';\n  var l1Paths = Object.keys(options.l1PathMap); // don`t need to transform\n\n  if (l1Paths.some(function (key) {\n    return urlObj.pathname.indexOf(options.l1PathMap[key]) === 0;\n  })) return url;\n  var levelPaths = urlObj.pathname.split('/').filter(function (v) {\n    return v;\n  }); // can`t transform\n\n  if (!l1Paths.includes(levelPaths[0])) return options.blockIntraUrl ? '' : url;\n  levelPaths[0] = options.l1PathMap[levelPaths[0]];\n  levelPaths[1] = options.l2PathMap[levelPaths[1]] || levelPaths[1];\n  return levelPaths.join('/') + (urlObj.hash || urlObj.search);\n};\n\nmodule.exports = {\n  testUrl: testUrl,\n  parseUrl: parseUrl,\n  getUrlFullInfo: getUrlFullInfo,\n  parseStyleUrl: parseStyleUrl,\n  execUrl: execUrl,\n  execStyleUrl: execStyleUrl,\n  transformCgi: transformCgi\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var _require = require('../utils/url-parser'),\n    transformCgi = _require.transformCgi;\n\nwindow.CORE_OPTIONS = JSON.parse('__OPTIONS__');\nCORE_OPTIONS.blockExtraUrl = true;\n\n(function (global) {\n  function replaceMethods() {\n    var options = [{\n      'target': XMLHttpRequest.prototype,\n      'methodName': 'open',\n      'urlArgIndex': 1\n    }, {\n      'target': global,\n      'methodName': 'open',\n      'urlArgIndex': 0\n    }, {\n      'target': XMLHttpRequest.prototype,\n      'methodName': 'setRequestHeader',\n      'customMethod': blockAjax\n    }, {\n      'target': XMLHttpRequest.prototype,\n      'methodName': 'send',\n      'customMethod': blockAjax\n    }];\n    options.forEach(replaceMethod);\n\n    function log(action, source, style) {\n      if (!global.console) return;\n      var value = '%c[local]api ' + action + ': ' + source;\n      style = Object.keys(style).reduce(function (value, cur) {\n        return value + cur + ':' + style[cur] + ';';\n      }, '');\n      global.console.log(value, style);\n    }\n\n    function blockAjax(oldMethod) {\n      return function () {\n        if (this.readyState !== this.OPENED) {\n          var oldMethodName = /function (\\w+)\\(/.exec(oldMethod.toString());\n          oldMethodName = oldMethodName ? oldMethodName[1].toUpperCase() : '';\n          log('block', oldMethodName + '=>' + this.aegisUrl, {\n            'color': 'lightseagreen',\n            'font-size': '14px'\n          });\n          return;\n        }\n\n        return oldMethod.apply(this, [].slice.call(arguments));\n      };\n    }\n\n    function replaceMethod(option) {\n      var oldMethod = option.target[option.methodName];\n\n      if (typeof option.urlArgIndex === 'number') {\n        option.target[option.methodName] = function () {\n          var newUrl = transformCgi(arguments[option.urlArgIndex], CORE_OPTIONS);\n          log('proxy', '', {\n            'color': '#ff008a',\n            'font-size': '14px'\n          });\n          log('origin', arguments[option.urlArgIndex], {\n            'color': 'aqua',\n            'font-size': '12px'\n          });\n          log('target', newUrl, {\n            'color': '#69e147',\n            'font-size': '12px'\n          });\n          arguments[option.urlArgIndex] = newUrl;\n          if (arguments[option.urlArgIndex]) return oldMethod.apply(this, [].slice.call(arguments));\n        };\n      }\n\n      if (typeof option.customMethod === 'function') {\n        option.target[option.methodName] = function () {\n          return option.customMethod(oldMethod).apply(this, [].slice.call(arguments));\n        };\n      }\n    }\n  }\n\n  replaceMethods();\n})(window);"],"mappingstPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}